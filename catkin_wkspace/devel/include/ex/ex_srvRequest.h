// Generated by gencpp from file ex/ex_srvRequest.msg
// DO NOT EDIT!


#ifndef EX_MESSAGE_EX_SRVREQUEST_H
#define EX_MESSAGE_EX_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ex
{
template <class ContainerAllocator>
struct ex_srvRequest_
{
  typedef ex_srvRequest_<ContainerAllocator> Type;

  ex_srvRequest_()
    : first(0)
    , second(0)  {
    }
  ex_srvRequest_(const ContainerAllocator& _alloc)
    : first(0)
    , second(0)  {
    }



   typedef int32_t _first_type;
  _first_type first;

   typedef int32_t _second_type;
  _second_type second;




  typedef boost::shared_ptr< ::ex::ex_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ex::ex_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ex_srvRequest_

typedef ::ex::ex_srvRequest_<std::allocator<void> > ex_srvRequest;

typedef boost::shared_ptr< ::ex::ex_srvRequest > ex_srvRequestPtr;
typedef boost::shared_ptr< ::ex::ex_srvRequest const> ex_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ex::ex_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ex::ex_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ex

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'ex': ['/home/saruman/workspaces/ros_workspace/case_robotics/nasa/catkin_wkspace/src/ex/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ex::ex_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ex::ex_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ex::ex_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ex::ex_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ex::ex_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ex::ex_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ex::ex_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05577f62131ad26921bff0de6b2cb722";
  }

  static const char* value(const ::ex::ex_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05577f62131ad269ULL;
  static const uint64_t static_value2 = 0x21bff0de6b2cb722ULL;
};

template<class ContainerAllocator>
struct DataType< ::ex::ex_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ex/ex_srvRequest";
  }

  static const char* value(const ::ex::ex_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ex::ex_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
int32 first\n\
int32 second\n\
";
  }

  static const char* value(const ::ex::ex_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ex::ex_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.first);
      stream.next(m.second);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ex_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ex::ex_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ex::ex_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "first: ";
    Printer<int32_t>::stream(s, indent + "  ", v.first);
    s << indent << "second: ";
    Printer<int32_t>::stream(s, indent + "  ", v.second);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EX_MESSAGE_EX_SRVREQUEST_H
